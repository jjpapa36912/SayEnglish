// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AdFitSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
@_exported import AdFitSDK
import AdSupport
import AppTrackingTransparency
import Combine
import CoreGraphics
import CoreTelephony
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Foundation/*.Data*/
import OSLog
import SceneKit
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc public protocol AdFitNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdDidClickAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BizBoardTemplate : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public static var defaultBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public static var defaultEdgeInset: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewleftMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewRightMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewTopMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewBottomMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public func adHeight(width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
extension AdFitSDK.BizBoardTemplate : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class AdFitMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any AdFitSDK.AdFitMediaViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var mainImage: UIKit.UIImage? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var useVideoControlView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public enum AdFitMediaType : Swift.Int, Swift.CustomStringConvertible {
  case unknown = 0
  case image = 1
  case video = 2
  case mixed = 3
  case carousel = 4
  case motion = 5
  case customBiz = 6
  case catalog = 7
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class NasResizableView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class FrameLayout : AdFitSDK.VirtualLayout {
  @_Concurrency.MainActor @preconcurrency open func calculateRectFromSubviews(_ size: CoreFoundation.CGSize, isEstimate: Swift.Bool, hasSubLayout: inout Swift.Bool, subviews: [UIKit.UIView]?, type: AdFitSDK.SizeClassType) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(IAVDSnapshotViewConfiguration) final public class SnapshotViewConfiguration : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(IAVDSnapshotViewHeaderAttributes) final public class HeaderAttributes : ObjectiveC.NSObject {
    @objc final public var color: UIKit.UIColor
    @objc final public var cornerRadius: CoreFoundation.CGFloat
    @objc final public var verticalInset: CoreFoundation.CGFloat
    @objc final public var font: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @objc final public var zSpacing: Swift.Float
  @objc final public var minimumZSpacing: Swift.Float
  @objc final public var maximumZSpacing: Swift.Float
  @objc final public var backgroundColor: UIKit.UIColor
  @objc final public var highlightColor: UIKit.UIColor
  @objc final public var normalHeaderAttributes: AdFitSDK.SnapshotViewConfiguration.HeaderAttributes
  @objc final public var importantHeaderAttributes: AdFitSDK.SnapshotViewConfiguration.HeaderAttributes
  @objc final public var descriptionFont: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
public struct LayoutGravity : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let none: AdFitSDK.LayoutGravity
  public struct Horz {
    public static let left: AdFitSDK.LayoutGravity
    public static let center: AdFitSDK.LayoutGravity
    public static let right: AdFitSDK.LayoutGravity
    public static let windowCenter: AdFitSDK.LayoutGravity
    public static let between: AdFitSDK.LayoutGravity
    public static let leading: AdFitSDK.LayoutGravity
    public static let trailing: AdFitSDK.LayoutGravity
    public static let around: AdFitSDK.LayoutGravity
    public static let among: AdFitSDK.LayoutGravity
    public static let fill: AdFitSDK.LayoutGravity
    public static let mask: AdFitSDK.LayoutGravity
  }
  public struct Vert {
    public static let top: AdFitSDK.LayoutGravity
    public static let center: AdFitSDK.LayoutGravity
    public static let bottom: AdFitSDK.LayoutGravity
    public static let windowCenter: AdFitSDK.LayoutGravity
    public static let between: AdFitSDK.LayoutGravity
    public static let fill: AdFitSDK.LayoutGravity
    public static let baseline: AdFitSDK.LayoutGravity
    public static let around: AdFitSDK.LayoutGravity
    public static let among: AdFitSDK.LayoutGravity
    public static let mask: AdFitSDK.LayoutGravity
  }
  public static let center: AdFitSDK.LayoutGravity
  public static let fill: AdFitSDK.LayoutGravity
  public static let between: AdFitSDK.LayoutGravity
  public static let around: AdFitSDK.LayoutGravity
  public static let among: AdFitSDK.LayoutGravity
  public typealias ArrayLiteralElement = AdFitSDK.LayoutGravity
  public typealias Element = AdFitSDK.LayoutGravity
  public typealias RawValue = Swift.Int
}
public func & (left: AdFitSDK.LayoutGravity, right: AdFitSDK.LayoutGravity) -> AdFitSDK.LayoutGravity
public func > (left: AdFitSDK.LayoutGravity, right: AdFitSDK.LayoutGravity) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NasAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var viewModel: AdFitSDK.NasAdViewModel? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func addSubview(_ view: UIKit.UIView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AdFitAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var infoView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension AdFitSDK.AdFitAdView : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func customInfoIconView() -> UIKit.UIImageView?
}
extension AdFitSDK.AdFitAdView : AdFitSDK.AdFitMediaViewInternalDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaViewVideoDidDurationChange(_ mediaView: AdFitSDK.AdFitMediaView, current: Foundation.TimeInterval, total: Foundation.TimeInterval)
}
final public class VFPositionValue {
  @discardableResult
  final public func equal(_ origin: Swift.Int, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func equal(_ origin: CoreFoundation.CGFloat, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func equal(_ weight: AdFitSDK.Weight, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func equal(_ array: [AdFitSDK.VFPositionValue], offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func equal(_ pos: AdFitSDK.VFPositionValue, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func min(_ val: CoreFoundation.CGFloat, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func min(_ val: AdFitSDK.VFPositionValue, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func max(_ val: CoreFoundation.CGFloat, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  @discardableResult
  final public func max(_ val: AdFitSDK.VFPositionValue, offset: CoreFoundation.CGFloat = 0) -> AdFitSDK.VFPositionValue
  final public func clear()
  final public var isActive: Swift.Bool {
    get
    set
  }
  final public var hasValue: Swift.Bool {
    get
  }
  final public var numberVal: CoreFoundation.CGFloat? {
    get
  }
  final public var weightVal: AdFitSDK.Weight? {
    get
  }
  final public var posVal: AdFitSDK.VFPositionValue? {
    get
  }
  final public var arrayVal: [AdFitSDK.VFPositionValue]? {
    get
  }
  final public var offset: CoreFoundation.CGFloat {
    get
  }
  final public var min: AdFitSDK.VFPositionValue {
    get
  }
  final public var max: AdFitSDK.VFPositionValue {
    get
  }
  public init(_ type: AdFitSDK.LayoutGravity, view: UIKit.UIView?)
  @objc deinit
}
public func >= (oprPos: AdFitSDK.VFPositionValue, size: CoreFoundation.CGFloat)
public func <= (oprPos: AdFitSDK.VFPositionValue, size: CoreFoundation.CGFloat)
@objc @_hasMissingDesignatedInitializers final public class AdFitNativeAd : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any AdFitSDK.AdFitNativeAdDelegate)?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var mediaAspectRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @objc final public var keywords: Swift.String? {
    @objc get
  }
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var body: Swift.String? {
    @objc get
  }
  @objc final public var profileName: Swift.String? {
    @objc get
  }
  @objc final public var callToAction: Swift.String? {
    @objc get
  }
  @objc final public let adUnitId: Swift.String?
  @objc final public var options: [Swift.String : Swift.String] {
    @objc get
  }
  @objc final public var reviewId: Swift.String? {
    @objc get
  }
  @objc final public var displayUrl: Swift.String? {
    @objc get
  }
  @objc final public var dspId: Swift.String? {
    @objc get
  }
  @objc final public var adInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc final public var infoIconTopConstant: CoreFoundation.CGFloat
  @objc final public var infoIconBottomConstant: CoreFoundation.CGFloat
  @objc final public var infoIconLeftConstant: CoreFoundation.CGFloat
  @objc final public var infoIconRightConstant: CoreFoundation.CGFloat
  @objc deinit
  @objc final public func bind(_ nativeAdView: UIKit.UIView)
  @objc final public func block()
}
public enum MultiAdTheme : Swift.String {
  case light
  case dark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class MultiNativeAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public func estimateHeight(width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension AdFitSDK.MultiNativeAdView {
  @_Concurrency.MainActor @preconcurrency final public func setUpStyle(isDarkMode: Swift.Bool)
}
extension AdFitSDK.MultiNativeAdView : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor @preconcurrency @objc final public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc final public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc final public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc final public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc final public func adMediaView() -> AdFitSDK.AdFitMediaView?
  @_Concurrency.MainActor @preconcurrency final public func isContainerClickable() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc final public func customInfoIconView() -> UIKit.UIImageView?
}
@objc public protocol AdFitNativeAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdLoaderDidReceiveAds(_ nativeAds: [AdFitSDK.AdFitNativeAd])
  @objc optional func nativeAdLoaderDidReceiveAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
  @objc optional func nativeAdLoaderDidFailToReceiveAd(_ nativeAdLoader: AdFitSDK.AdFitNativeAdLoader, error: any Swift.Error)
}
@objc public enum AdFitVideoPlayPolicy : Swift.Int, Swift.CustomStringConvertible {
  case alwaysManualPlay = 0
  case alwaysAutoPlay = 1
  case autoPlayOnWifiOnly = 2
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AdFitBannerAdViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adViewDidReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
  @objc optional func adViewDidFailToReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView, error: any Swift.Error)
  @objc optional func adViewDidClickAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
}
precedencegroup AnchorPriorityOperatorPrecedence {
  associativity: left
  assignment: false
  higherThan: ComparisonPrecedence
  lowerThan: MultiplicationPrecedence
}
infix operator ! : AnchorPriorityOperatorPrecedence
@objc public protocol AdFitMediaViewInternalDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mediaViewVideoDidDurationChange(_ mediaView: AdFitSDK.AdFitMediaView, current: Foundation.TimeInterval, total: Foundation.TimeInterval)
}
@objc @_Concurrency.MainActor @preconcurrency open class LinearLayout : AdFitSDK.VirtualLayout {
  @_Concurrency.MainActor @preconcurrency convenience public init(_ direction: AdFitSDK.Direction)
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, direction: AdFitSDK.Direction)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public var direction: AdFitSDK.Direction {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willRemoveSubview(_ subview: UIKit.UIView)
  @objc deinit
}
public protocol PopUpTemplatePresenterDelegate : AnyObject {
  func adViewDidReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView)
  func adViewDidFailToReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView, error: any Swift.Error)
  func adViewDidClickAd(_ adView: AdFitSDK.AdFitFlexibleView)
}
final public class PopUpTemplatePresenter {
  weak final public var delegate: (any AdFitSDK.PopUpTemplatePresenterDelegate)?
  public init()
  final public func presentPopUpTemplate(_ rootViewController: UIKit.UIViewController)
  final public func presentCenterPopUpTemplate(_ rootViewController: UIKit.UIViewController)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var vfBaseline: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfTop: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfLeading: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfBottom: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfTrailing: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfCenterX: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfCenterY: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfLeft: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfRight: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfWidth: AdFitSDK.VFLayoutSize {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfHeight: AdFitSDK.VFLayoutSize {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfWidthRatio: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfHeightRatio: AdFitSDK.VFPositionValue {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var vfVisibility: AdFitSDK.Visibility {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var vfAlign: AdFitSDK.LayoutGravity {
    get
    set
  }
}
extension AVKit.AVPlayerViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
}
@_hasMissingDesignatedInitializers public class ThemeManager {
  public static let shared: AdFitSDK.ThemeManager
  public func changeTheme()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency final public class AdFitBannerAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public var clientId: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var adUnitSize: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any AdFitSDK.AdFitBannerAdViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency weak final public var rootViewController: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc override final public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var clipsToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, adUnitSize: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func addSubview(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency final public func loadAd()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class VirtualLayout : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willRemoveSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct PopUpAdTemplateView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8AdFitSDK05PopUpA12TemplateViewV4bodyQrvp", 0) __
}
extension AdFitSDK.PopUpAdTemplateView {
  @_Concurrency.MainActor @preconcurrency public func onDidReceiveAd(_ handler: @escaping () -> Swift.Void) -> AdFitSDK.PopUpAdTemplateView
  @_Concurrency.MainActor @preconcurrency public func onFailToReceiveAd(_ handler: @escaping (any Swift.Error) -> Swift.Void) -> AdFitSDK.PopUpAdTemplateView
  @_Concurrency.MainActor @preconcurrency public func onDidClickAd(_ handler: @escaping () -> Swift.Void) -> AdFitSDK.PopUpAdTemplateView
}

@objc @_inheritsConvenienceInitializers final public class AdFit : ObjectiveC.NSObject {
  @objc public static var videoPlayPolicy: AdFitSDK.AdFitVideoPlayPolicy
  @objc public static var isTVA: Swift.Bool
  @objc final public class func configInit()
  @objc public static func register(webView: WebKit.WKWebView)
  public static func unRegister(webView: WebKit.WKWebView)
  @objc override dynamic public init()
  @objc deinit
}
public enum SizeClassType {
  public enum Width {
    case any
    case compact
    case regular
    public static func == (a: AdFitSDK.SizeClassType.Width, b: AdFitSDK.SizeClassType.Width) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Height {
    case any
    case compact
    case regular
    public static func == (a: AdFitSDK.SizeClassType.Height, b: AdFitSDK.SizeClassType.Height) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Direction {
    case portrait
    case landscape
    public static func == (a: AdFitSDK.SizeClassType.Direction, b: AdFitSDK.SizeClassType.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case `default`
  case portrait
  case landscape
  case custom(AdFitSDK.SizeClassType.Width, AdFitSDK.SizeClassType.Height, AdFitSDK.SizeClassType.Direction?)
}
@_Concurrency.MainActor @preconcurrency public struct BizBoardTemplatePresentableView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, refresh: SwiftUICore.Binding<Swift.Bool>)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AdFitSDK.BizBoardTemplatePresentableView.Context) -> AdFitSDK.BizBoardTemplate
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AdFitSDK.BizBoardTemplate, context: AdFitSDK.BizBoardTemplatePresentableView.Context)
  @_Concurrency.MainActor @preconcurrency public func onDidReceiveAd(_ closure: ((AdFitSDK.AdFitNativeAd) -> Swift.Void)?) -> AdFitSDK.BizBoardTemplatePresentableView
  @_Concurrency.MainActor @preconcurrency public func onDidFailToReceiveAd(_ closure: ((any Swift.Error) -> Swift.Void)?) -> AdFitSDK.BizBoardTemplatePresentableView
  @_Concurrency.MainActor @preconcurrency public func onDidClickAd(_ closure: ((AdFitSDK.AdFitNativeAd) -> Swift.Void)?) -> AdFitSDK.BizBoardTemplatePresentableView
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AdFitSDK.BizBoardTemplatePresentableView.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, AdFitSDK.AdFitNativeAdLoaderDelegate, AdFitSDK.AdFitNativeAdDelegate {
    @objc public func nativeAdLoaderDidReceiveAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
    @objc public func nativeAdLoaderDidFailToReceiveAd(_ nativeAdLoader: AdFitSDK.AdFitNativeAdLoader, error: any Swift.Error)
    @objc public func nativeAdDidClickAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = AdFitSDK.BizBoardTemplate
}
extension AdFitSDK.BizBoardTemplatePresentableView {
  @_Concurrency.MainActor @preconcurrency public func onSizeThatFits() -> some SwiftUICore.View
  
}
@objc @_hasMissingDesignatedInitializers public class NasAdViewModel : ObjectiveC.NSObject {
  @objc public var adAspectRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var maxHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc weak public var rootViewController: UIKit.UIViewController?
  @objc public func bind()
  @objc public func unbind()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PlainNativeAdView : UIKit.UIView, AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor @preconcurrency public var blockHandler: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc public func adMediaView() -> AdFitSDK.AdFitMediaView?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ContentObject : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @discardableResult
  @objc public func setId(_ id: Swift.String) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setUrl(_ url: Swift.String) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setTitle(_ title: Swift.String) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setSearchKeyword(_ search: Swift.String) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setKeywords(_ keywords: [Swift.String]) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setCategoryTaxonomies(_ cattax: Swift.Int) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setCategories(_ cat: [Swift.String]) -> AdFitSDK.ContentObject
  @discardableResult
  @objc public func setSectionCategories(_ sectioncat: [Swift.String]) -> AdFitSDK.ContentObject
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class UserObject : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @discardableResult
  public func setKeywords(_ keywords: [Swift.String]) -> AdFitSDK.UserObject
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc final public class TalkFolderObject : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @discardableResult
  final public func setSubTabIndex(_ subTabIndex: Swift.Int) -> AdFitSDK.TalkFolderObject
  @discardableResult
  final public func setIsTalkPlus(_ isTalkPlus: Swift.Bool) -> AdFitSDK.TalkFolderObject
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol AdFitMediaViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mediaViewVideoDidPlay(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidPause(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidComplete(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidMute(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidUnmute(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidDurationChange(_ mediaView: AdFitSDK.AdFitMediaView, current: Foundation.TimeInterval, total: Foundation.TimeInterval)
  @objc optional func mediaViewVideoDidFailed(_ mediaView: AdFitSDK.AdFitMediaView, error: any Swift.Error)
  @objc optional func mediaViewVideoDidChangeBuffering(_ mediaView: AdFitSDK.AdFitMediaView, buffering: Swift.Bool)
}
@_Concurrency.MainActor @preconcurrency public struct PopUpTransitionModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(adUnitId: Swift.String, isPresented: SwiftUICore.Binding<Swift.Bool>)
  @_Concurrency.MainActor @preconcurrency public func body(content: AdFitSDK.PopUpTransitionModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8AdFitSDK23PopUpTransitionModifierV4body7contentQr7SwiftUI05_ViewG8_ContentVyACG_tF", 0) __
}
@objc final public class AdFitNativeAdLoader : ObjectiveC.NSObject {
  @objc final public var ads: [AdFitSDK.AdFitNativeAd]
  @objc final public var firstAd: AdFitSDK.AdFitNativeAd? {
    @objc get
  }
  @objc weak final public var delegate: (any AdFitSDK.AdFitNativeAdLoaderDelegate)?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var infoIconPosition: AdFitSDK.AdFitInfoIconPosition
  @objc final public var desiredMediaWidth: CoreFoundation.CGFloat
  @objc public init(clientId: Swift.String, count: Swift.Int = 1, userObject: AdFitSDK.UserObject? = nil, contentObject: AdFitSDK.ContentObject? = nil)
  @objc final public func loadAd(keyword: Swift.String? = nil)
  @objc deinit
}
@objc public enum AdMotionPlayType : Swift.Int {
  case all = 0
  case onlyAnimation = 1
  case stillCut = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Weight {
  public static let zeroWeight: AdFitSDK.Weight
  public static let fillWeight: AdFitSDK.Weight
  public init(_ value: Swift.Int)
  public init(_ value: CoreFoundation.CGFloat)
}
extension AdFitSDK.Weight : Swift.Equatable {
}
public func != (lhs: AdFitSDK.Weight, rhs: AdFitSDK.Weight) -> Swift.Bool
public func == (lhs: AdFitSDK.Weight, rhs: AdFitSDK.Weight) -> Swift.Bool
public func += (lhs: inout AdFitSDK.Weight, rhs: AdFitSDK.Weight)
public func -= (lhs: inout AdFitSDK.Weight, rhs: AdFitSDK.Weight)
public func + (lhs: AdFitSDK.Weight, rhs: AdFitSDK.Weight) -> AdFitSDK.Weight
postfix operator %
postfix public func % (val: CoreFoundation.CGFloat) -> AdFitSDK.Weight
postfix public func % (val: Swift.Int) -> AdFitSDK.Weight
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class AdFitFlexibleView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public var clientId: Swift.String {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var desiredMediaWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any AdFitSDK.AdFitFlexibleViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency final public var adRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(adUnitId: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency weak final public var rootViewController: UIKit.UIViewController?
  @objc @_Concurrency.MainActor @preconcurrency final public func loadAd()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency final public var latestContainerHeight: CoreFoundation.CGFloat {
    get
  }
}
@objc public protocol AdFitFlexibleViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adViewDidReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView)
  @objc optional func adViewDidFailToReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView, error: any Swift.Error)
  @objc optional func adViewDidClickAd(_ adView: AdFitSDK.AdFitFlexibleView)
}
@_Concurrency.MainActor @preconcurrency public struct AdFitBannerPresentableView : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = AdFitSDK.AdFitBannerAdView
  @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, adUnitSize: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AdFitSDK.AdFitBannerPresentableView.Context) -> AdFitSDK.AdFitBannerAdView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AdFitSDK.AdFitBannerAdView, context: AdFitSDK.AdFitBannerPresentableView.Context)
  @_Concurrency.MainActor @preconcurrency public func onDidClickAd(_ closure: ((AdFitSDK.AdFitBannerAdView) -> Swift.Void)?) -> AdFitSDK.AdFitBannerPresentableView
  @_Concurrency.MainActor @preconcurrency public func onDidReceiveAd(_ closure: ((AdFitSDK.AdFitBannerAdView, (any Swift.Error)?) -> Swift.Void)?) -> AdFitSDK.AdFitBannerPresentableView
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AdFitSDK.AdFitBannerPresentableView.Coordinator
  @objc @_inheritsConvenienceInitializers public class Coordinator : ObjectiveC.NSObject, AdFitSDK.AdFitBannerAdViewDelegate {
    @objc public func adViewDidClickAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
    @objc public func adViewDidReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
    @objc public func adViewDidFailToReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView, error: any Swift.Error)
    @objc override dynamic public init()
    @objc deinit
  }
  public typealias Body = Swift.Never
}
extension AdFitSDK.AdFitBannerPresentableView {
  @_Concurrency.MainActor @preconcurrency public func onSizeThatFits(orientation: SwiftUICore.Binding<UIKit.UIDeviceOrientation>, width: CoreFoundation.CGFloat = UIApplication.shared.safeBounds.width) -> some SwiftUICore.View
  
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BizBoardCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor @preconcurrency public static var defaultBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public static var defaultEdgeInset: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewleftMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewRightMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewTopMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bgViewBottomMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func adHeight(width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
extension AdFitSDK.BizBoardCell : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
}
public enum KakaoIntergration : Swift.Hashable {
  case none
  case sdk(appKey: Swift.String, appUserId: Swift.String)
  case account(accountId: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdFitSDK.KakaoIntergration, b: AdFitSDK.KakaoIntergration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AdFitSDK.AdFit {
  @objc final public class func register(appKey: Swift.String, appUserId: Swift.String)
  @objc final public class func register(accountId: Swift.String)
  @objc final public class func unregister()
}
extension Swift.Dictionary {
  public func get<T>(_ key: Key) -> T?
  public func get<T>(_ key: Key, defaultValue: T) -> T
  public func color(_ key: Key) -> UIKit.UIColor?
  public func image(_ key: Key) -> UIKit.UIImage?
  public func cast<T>(_ key: Key) -> T? where T : AdFitSDK.StringRepresentable
}
public protocol StringRepresentable {
  static func fromString(_ value: Swift.String) -> Self?
}
extension Swift.Float : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> Swift.Float?
}
extension CoreFoundation.CGFloat : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> CoreFoundation.CGFloat?
}
extension Swift.Int : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> Swift.Int?
}
extension Swift.String : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> Swift.String?
}
extension Swift.Bool : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> Swift.Bool?
}
extension Foundation.URL : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> Foundation.URL?
}
extension ObjectiveC.Selector : AdFitSDK.StringRepresentable {
  public static func fromString(_ value: Swift.String) -> ObjectiveC.Selector?
}
@_Concurrency.MainActor @preconcurrency public struct NASPresentableView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, loadTrigger: SwiftUICore.Binding<Swift.Bool> = .init(get: { return false }, set: { _ in }))
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AdFitSDK.NASPresentableView.Context) -> AdFitSDK.AdFitFlexibleView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AdFitSDK.AdFitFlexibleView, context: AdFitSDK.NASPresentableView.Context)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AdFitSDK.NASPresentableView.Coordinator
  @_Concurrency.MainActor @preconcurrency public func onCalculatedHeight(_ handler: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> AdFitSDK.NASPresentableView
  @_Concurrency.MainActor @preconcurrency public func onDidReceiveAd(_ handler: @escaping () -> Swift.Void) -> AdFitSDK.NASPresentableView
  @_Concurrency.MainActor @preconcurrency public func onFailToReceiveAd(_ handler: @escaping (any Swift.Error) -> Swift.Void) -> AdFitSDK.NASPresentableView
  @_Concurrency.MainActor @preconcurrency public func onDidClickAd(_ handler: @escaping () -> Swift.Void) -> AdFitSDK.NASPresentableView
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, AdFitSDK.AdFitFlexibleViewDelegate {
    public func loadAd(trigger: Swift.Bool)
    @objc public func adViewDidReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView)
    @objc public func adViewDidFailToReceiveAd(_ adView: AdFitSDK.AdFitFlexibleView, error: any Swift.Error)
    @objc public func adViewDidClickAd(_ adView: AdFitSDK.AdFitFlexibleView)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = AdFitSDK.AdFitFlexibleView
}
@objc public protocol NasAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didReceivedAd(_ viewModel: AdFitSDK.NasAdViewModel)
  @objc optional func didFailToReceiveAd()
}
@objc final public class NasAdLoader : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any AdFitSDK.NasAdLoaderDelegate)?
  @objc final public var desiredMediaWidth: CoreFoundation.CGFloat
  @objc public init(adUnitId: Swift.String, preload: Swift.Bool = true)
  @objc final public func loadAd()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BannerSizeModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(unitSize: Swift.String, width: CoreFoundation.CGFloat = UIApplication.shared.safeBounds.width)
  @_Concurrency.MainActor @preconcurrency public func body(content: AdFitSDK.BannerSizeModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8AdFitSDK18BannerSizeModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACG_tF", 0) __
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public var safeBounds: CoreFoundation.CGRect {
    get
  }
}
@objc public protocol AdFitNativeAdRenderable {
  @objc func adTitleLabel() -> UIKit.UILabel?
  @objc optional func adBodyLabel() -> UIKit.UILabel?
  @objc func adCallToActionButton() -> UIKit.UIButton?
  @objc func adProfileNameLabel() -> UIKit.UILabel?
  @objc func adProfileIconView() -> UIKit.UIImageView?
  @objc func adMediaView() -> AdFitSDK.AdFitMediaView?
  @objc optional func customInfoIconView() -> UIKit.UIImageView?
}
public enum Visibility {
  case visible
  case invisible
  case gone
  public static func == (a: AdFitSDK.Visibility, b: AdFitSDK.Visibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Direction {
  case vertical
  case horizontal
  public static func == (a: AdFitSDK.Direction, b: AdFitSDK.Direction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum AdFitInfoIconPosition : Swift.Int, Swift.CustomStringConvertible {
  case topLeft = 0
  case topRight = 1
  case bottomLeft = 2
  case bottomRight = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VFLayoutSizeValueType {
}
extension CoreFoundation.CGFloat : AdFitSDK.VFLayoutSizeValueType {
}
extension Swift.Double : AdFitSDK.VFLayoutSizeValueType {
}
extension Swift.Int : AdFitSDK.VFLayoutSizeValueType {
}
extension AdFitSDK.Weight : AdFitSDK.VFLayoutSizeValueType {
}
extension Swift.Array : AdFitSDK.VFLayoutSizeValueType {
}
extension AdFitSDK.VFLayoutSize : AdFitSDK.VFLayoutSizeValueType {
}
extension UIKit.UIView : AdFitSDK.VFLayoutSizeValueType {
}
final public class VFLayoutSize {
  public static let wrap: AdFitSDK.VFLayoutSize
  public static let fill: AdFitSDK.VFLayoutSize
  @discardableResult
  final public func equal(_ weight: AdFitSDK.Weight, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func equal(_ value: AdFitSDK.VFLayoutSize, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func equal(_ value: any AdFitSDK.VFLayoutSizeValueType) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func add(_ val: CoreFoundation.CGFloat) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func min(_ size: CoreFoundation.CGFloat, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func min(_ dime: AdFitSDK.VFLayoutSize, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func max(_ size: CoreFoundation.CGFloat, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func max(_ size: AdFitSDK.VFLayoutSize, increment: CoreFoundation.CGFloat = 0, multiple: CoreFoundation.CGFloat = 1) -> AdFitSDK.VFLayoutSize
  @discardableResult
  final public func and() -> UIKit.UIView?
  final public func clear()
  final public var isActive: Swift.Bool {
    get
    set
  }
  final public var hasValue: Swift.Bool {
    get
  }
  final public var isWrap: Swift.Bool {
    get
  }
  final public var isFill: Swift.Bool {
    get
  }
  final public var numberVal: CoreFoundation.CGFloat? {
    get
  }
  final public var sizeVal: AdFitSDK.VFLayoutSize? {
    get
  }
  final public var arrayVal: [AdFitSDK.VFLayoutSize]? {
    get
  }
  final public var weightVal: AdFitSDK.Weight? {
    get
  }
  final public var increment: CoreFoundation.CGFloat {
    get
  }
  final public var multiple: CoreFoundation.CGFloat {
    get
  }
  final public var min: AdFitSDK.VFLayoutSize {
    get
  }
  final public var max: AdFitSDK.VFLayoutSize {
    get
  }
  public init(_ type: AdFitSDK.LayoutGravity, view: UIKit.UIView?)
  @objc deinit
}
extension AdFitSDK.AdFitMediaType : Swift.Equatable {}
extension AdFitSDK.AdFitMediaType : Swift.Hashable {}
extension AdFitSDK.AdFitMediaType : Swift.RawRepresentable {}
extension AdFitSDK.MultiAdTheme : Swift.Equatable {}
extension AdFitSDK.MultiAdTheme : Swift.Hashable {}
extension AdFitSDK.MultiAdTheme : Swift.RawRepresentable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Equatable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Hashable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.RawRepresentable {}
extension AdFitSDK.PopUpAdTemplateView : Swift.Sendable {}
extension AdFitSDK.SizeClassType.Width : Swift.Equatable {}
extension AdFitSDK.SizeClassType.Width : Swift.Hashable {}
extension AdFitSDK.SizeClassType.Height : Swift.Equatable {}
extension AdFitSDK.SizeClassType.Height : Swift.Hashable {}
extension AdFitSDK.SizeClassType.Direction : Swift.Equatable {}
extension AdFitSDK.SizeClassType.Direction : Swift.Hashable {}
extension AdFitSDK.BizBoardTemplatePresentableView : Swift.Sendable {}
extension AdFitSDK.PopUpTransitionModifier : Swift.Sendable {}
extension AdFitSDK.AdMotionPlayType : Swift.Equatable {}
extension AdFitSDK.AdMotionPlayType : Swift.Hashable {}
extension AdFitSDK.AdMotionPlayType : Swift.RawRepresentable {}
extension AdFitSDK.AdFitBannerPresentableView : Swift.Sendable {}
extension AdFitSDK.NASPresentableView : Swift.Sendable {}
extension AdFitSDK.BannerSizeModifier : Swift.Sendable {}
extension AdFitSDK.Visibility : Swift.Equatable {}
extension AdFitSDK.Visibility : Swift.Hashable {}
extension AdFitSDK.Direction : Swift.Equatable {}
extension AdFitSDK.Direction : Swift.Hashable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Equatable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Hashable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.RawRepresentable {}
